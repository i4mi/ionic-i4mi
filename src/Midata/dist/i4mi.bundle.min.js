angular.module("i4mi.defaults", []).constant("I4MIFormats", {
    date: {
      iso: "iso",
      object: "$"
    }
  }).constant("I4MISystems", {
    measure: "http://unitsofmeasure.org"
  }).constant("I4MIUnits", {
    weight: {
      name: "kg",
      system: "{$ref:I4MISystems.measure}"
    }
  }).constant("I4MISchemes", {
    weight: {
      midata: {
        name: "Weight",
        format: "fhir/Observation",
        subformat: "Quantity",
        content: "http://loinc.org 3141-9",
        data: "$ref:I4MISchemes.weight.fhir"
      },
      fhir: {
        resourceType: "Observation",
        status: "preliminary",
        effectiveDateTime: null,
        category: {
          coding: [{
            system: "http://hl7.org/fhir/ValueSet/observation-category",
            code: "vital-signs",
            display: "Vital Signs"
          }]
        },
        code: {
          coding: [{
            system: "http://loinc.org",
            code: "3141-9",
            display: "Body weight Measured"
          }]
        },
        valueQuantity: {
          unit: "{$ref:I4MIUnits.weight.name}",
          system: "{$ref:I4MIUnits.weight.system}",
          code: "{$ref:I4MIUnits.weight.name}",
          value: null
        }
      },
      healthkit: {
        startDate: null,
        endDate: null,
        sampleType: "HKQuantityTypeIdentifierBodyMass",
        unit: "{$ref:I4MIUnits.weight.name}",
        amount: null
      }
    }
  }).constant("I4MIMapping", {
    weight: {
      midata: {
        value: ["data.{$ref:I4MIMapping.weight.fhir.value}"],
        date: ["data.{$ref:I4MIMapping.weight.fhir.date}|{$ref:I4MIFormats.date.iso}"],
        typeKey: "content"
      },
      fhir: {
        value: ["valueQuantity.value"],
        date: ["effectiveDateTime"],
        typeKey: "code.coding"
      },
      healthkit: {
        value: ["amount", "value"],
        date: ["startDate|{$ref:I4MIFormats.date.object}", "endDate|{$ref:I4MIFormats.date.object}"],
        typeKey: "sampleType"
      }
    }
  }),



  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.ccda.import.html", '<div ng-if="viewClass === \'modal\'" class={{viewClass}}><ion-header-bar class="bar-light item-icon-left"><i class="icon ion-android-close" ng-click=closeModal()></i><h1 class=title>CCDA Import</h1></ion-header-bar><ion-content padding=true overflow-scroll=false class=has-header><div ng-show=info.text class="item item-{{info.type}} i4mi-info">{{info.text}}</div><label class="item item-input"><input ng-bind=url type=text placeholder="http://"></label> <button type=submit class="button button-full button-positive" ng-click=import(url)>Import</button></ion-content></div><div ng-show=!record ng-if="viewClass !== \'modal\'" class={{viewClass}}><div ng-show=info.text class="item item-{{info.type}} i4mi-info">{{info.text}}</div><label class="item item-input"><input ng-model=url type=text placeholder="http://"></label> <button type=submit class="button button-full button-positive" ng-click=import(url)>Import</button></div><div ng-show=record ng-if="viewClass !== \'modal\'" class={{viewClass}}><button ng-show=actionText type=submit class="button button-full button-positive" ng-click=continue(record)>{{actionText}}</button><div ng-if=!display><span>{{record.type}}:</span> <span class="badge badge-positive" ng-repeat="(key,value) in record.data">{{key}}</span></div><ion-list ng-if="display === \'list\'"><ion-item>Record Type: {{record.type}}</ion-item><ion-item class=item-divider>Imported Data</ion-item><ion-item>{{key}}</ion-item></ion-list><ion-list ng-if="display === \'extended\'"><ion-item class=item-divider>record type</ion-item><ion-item>{{record.type}}</ion-item><div ng-repeat="(key,value) in record.data"><ion-item class=item-divider>{{key}}</ion-item><ion-item class=item-text-wrap ng-repeat="(k,v) in value"><h2>{{k}}</h2><json-formatter open=1 json=v></json-formatter></ion-item></div></ion-list></div>')
    }])
  }(),



  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.healthkit.basic.html", '<div class=list><div ng-show=title class="item item-divider">{{title}}</div><label class="item item-input"><span class=input-label>Date of Birth:</span> <input type=text value="{{ data.dateofbirth | date:\'dd MMMM yyyy\' }}" disabled></label> <label class="item item-input"><span class=input-label>Gender:</span> <input type=text value="{{ data.gender }}" disabled></label> <label class="item item-input"><span class=input-label>Blood Type:</span> <input type=text value="{{ data.bloodtype }}" disabled></label> <label class="item item-input"><span class=input-label>Weight [{{ data.weight.unit }}]:</span> <input type=number ng-change=change(data) ng-blur=blur(data) ng-model=data.weight.value value="{{ data.weight.value }}"></label> <label class="item item-input"><span class=input-label>Height [{{ data.height.unit }}]:</span> <input type=number ng-change=change(data) ng-blur=blur(data) ng-model=data.height.value value="{{ data.height.value }}"></label> <button ng-show="autosave!==\'true\'" ng-disabled=saved ng-click=save(data) class="button button-positive button-full">Save</button></div>')
    }])
  }(),



  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.midata.capture.html", '<video controls><source src=movie.mp4 type=video/mp4></video><button type=submit class="button button-block button-positive" ng-click=add(model)>Add Entry</button>')
    }])
  }(),
  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.midata.chart.html", "<nvd3 options=options data=data></nvd3>")
    }])
  }(),
  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.midata.entry.html", '<div ng-if="viewClass === \'modal\'" class={{viewClass}}><ion-header-bar class="bar-light item-icon-left"><i class="icon ion-android-close" ng-click=closeModal()></i><h1 class=title>MIDATA New Entry</h1></ion-header-bar><ion-content overflow-scroll=true class=has-header><div ng-show=info.text class="item item-{{info.type}} i4mi-info">{{info.text}}</div><formly-form model=model fields=schema><div ng-if="native+\'\' === \'true\'" class="item item-input"><input type=datetime ng-model=datetime></div><div ng-if="native+\'\' !== \'true\'" class="button-bar i4mi-datetime"><button class="button button-light" ng-click=openDatePicker()>{{ datetime | date:\'dd. MMMM yyyy\' }}</button> <button ionic-timepicker input-obj=tpo class="button button-light">{{ datetime | date:\'HH:mm\' }}</button></div><button type=submit class="button button-full button-positive" ng-click=add(model)>Add Entry</button></formly-form></ion-content></div><div ng-if="viewClass === \'widget\'" class={{viewClass}}><div ng-show=info.text class="item item-{{info.type}} i4mi-info">{{info.text}}</div><formly-form model=model fields=schema><div ng-if="native+\'\' === \'true\'" class="item item-input"><input type=datetime ng-model=datetime></div><div ng-if="native+\'\' !== \'true\'" class="button-bar item item-input i4mi-datetime"><button class="button button-light" ng-click=openDatePicker()>{{ datetime | date:\'dd. MMMM yyyy\' }}</button> <button ionic-timepicker input-obj=tpo class="button button-light">{{ datetime | date:\'HH:mm\' }}</button></div><button type=submit class="button button-block button-positive" ng-click=add(model)>Add Entry</button></formly-form></div>')
    }])
  }(),
  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.midata.list.html", '<ion-list can-swipe="canSwipe !== \'false\'"><ion-item ng-if="record.data.status !== \'entered-in-error\'" ng-repeat="record in records"><div ng-if="!templateUrl || templateUrl === \'\'"><div ng-if=!record.data.valueQuantity><h3><span class=i4mi-name>{{ record.name }}</span></h3><h2><div ng-repeat="(key,value) in record.data track by $index"><div ng-show=shouldShow(key)><span ng-show="showKey !== \'false\'" class=i4mi-key>{{ key }}:</span> <span class=i4mi-value>{{ value }}</span></div></div></h2><h4><span class=i4mi-description>{{ record.description }}</span></h4><h4><span class=i4mi-datetime>{{ record.data.effectiveDateTime | date:\'dd. MMMM yyyy\' }}</span></h4></div><div ng-if=record.data.valueQuantity><h3><span class=i4mi-name>{{ record.name }}</span></h3><h2><span class=i4mi-value>{{ record.data.valueQuantity.value }}</span> <span class=i4mi-unit>{{ record.data.valueQuantity.unit }}</span></h2><h4><span class=i4mi-description>{{ record.description }}</span></h4><h4 ng-repeat="system in record.data.code.coding"><span class=i4mi-system>{{ system.system }}</span> <span class=i4mi-code>{{ system.code }}</span> <span class=i4mi-display>{{ system.display }}</span></h4><h4><span class=i4mi-datetime>{{ record.data.effectiveDateTime | date:\'dd. MMMM yyyy\' }}</span></h4></div></div><div ng-if="templateUrl !== \'\'"><div class=dynamic-field ng-include=templateUrl></div></div><ion-option-button class=button-assertive ng-click=remove(record)>Remove</ion-option-button></ion-item></ion-list>')
    }])
  }(),


  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.midata.login.html", '<div ng-if="viewClass === \'modal\'" class={{viewClass}}><ion-header-bar class="bar-light item-icon-left"><i class="icon ion-android-close" ng-click=closeModal()></i><h1 class=title>MIDATA Login</h1></ion-header-bar><ion-content padding=true overflow-scroll=false class=has-header><div ng-show=info.text class="item item-{{info.type}} i4mi-info">{{info.text}}</div><formly-form model=user fields=userFields><button type=submit class="button button-full button-positive" ng-click=login(user)>Login</button></formly-form></ion-content></div><div ng-show=!loggedIn ng-if="viewClass === \'widget\'" class={{viewClass}}><div ng-show=info.text class="item item-{{info.type}} i4mi-info">{{info.text}}</div><formly-form model=user fields=userFields><button type=submit class="button button-full button-positive" ng-click=login(user)>Login</button></formly-form></div><div ng-show=loggedIn ng-if="viewClass === \'widget\'" class={{viewClass}}><label class=item>{{currentUser}}</label> <button type=submit class="button button-full button-positive" ng-click=logout()>Logout</button></div>')
    }])
  }(),

  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.midata.logout.html", '<div ng-if="viewClass === \'modal\'" class={{viewClass}}><ion-header-bar class=bar-light><h1 class=title>MIDATA</h1></ion-header-bar><ion-content><label>{{currentUser}}</label> <button type=submit class="button button-full button-positive" ng-click=logout()>Logout</button></ion-content></div><div ng-if="viewClass === \'widget\'" class={{viewClass}}><label class=item>{{currentUser}}</label> <button type=submit class="button button-full button-positive" ng-click=logout()>Logout</button></div>')
    }])
  }(),


  function(e) {
    try {
      e = angular.module("i4mi.templates")
    } catch (t) {
      e = angular.module("i4mi.templates", [])
    }
    e.run(["$templateCache", function(e) {
      e.put("i4mi.modal.html", "<div class=modal><div class=dynamic-field ng-include=templateUrl></div></div>")
    }])
  }(), angular.module("i4mi", ["i4mi.templates", "i4mi.defaults", "ionic", "ionic-datepicker", "ionic-timepicker", "ngStorage", "mdo-angular-cryptography", "jsonFormatter"]).controller("I4MIMidataLoginController", ["$scope", "I4MIMidataService", "$timeout", function(e, t, i) {
    e.currentUser = t.currentUser(), e.loggedIn = t.loggedIn(), e.login = function(n) {
      t.auth(n).then(function(a) {
        a.authorized ? (e.info = {
          text: a.info,
          type: "balanced"
        }, i(function() {
          e.closeModal(), e.info = !1, e.loggedIn = !0, e.currentUser = n.username
        }, 700)) : (e.loggedIn = t.loggedIn(), e.info = {
          text: a.info,
          type: "energized"
        })
      }, function(i) {
        e.loggedIn = t.loggedIn(), e.info = {
          text: i,
          type: "assertive"
        }
      })
    }, e.logout = function() {
      t.logout(), e.loggedIn = !1, e.currentUser = ""
    }, e.userFields = [{
      key: "username",
      type: "input",
      templateOptions: {
        type: "email",
        label: "Email address",
        placeholder: "hello@example.org"
      }
    }, {
      key: "password",
      type: "input",
      templateOptions: {
        type: "password",
        label: "Password",
        placeholder: "•••••••••••"
      }
    }, {
      key: "server",
      type: "input",
      templateOptions: {
        type: "text",
        label: "MIDATA Server",
        placeholder: "https://test.midata.coop:9000"
      }
    }]
  }]).controller("I4MIMidataEntryController", ["$scope", "$timeout", "$ionicPopup", "I4MIMidataService", "ionicDatePicker", function(e, t, i, n, a) {
    var o = function(t) {
      t = new Date(t), e.datetime.setFullYear(t.getFullYear()), e.datetime.setMonth(t.getMonth()), e.datetime.setDate(t.getDate())
    };
    e.openDatePicker = function() {
      a.openDatePicker({
        callback: o,
        inputDate: e.datetime
      })
    };
    var r = function(t) {
        t = new Date(1e3 * t), e.datetime.setHours(t.getUTCHours()), e.datetime.setMinutes(t.getUTCMinutes()), e.tpo.inputEpochTime = 60 * e.datetime.getHours() * 60 + 60 * e.datetime.getMinutes()
      },
      s = function() {
        e.model = {}, e.datetime = new Date, e.datetime.setSeconds(0), e.datetime.setMilliseconds(0), "true" !== e["native"] && e.datetime.setMinutes(5 * Math.round(e.datetime.getMinutes() / 5))
      };
    s(), e.tpo = {
      callback: r,
      inputEpochTime: 60 * e.datetime.getHours() * 60 + 60 * e.datetime.getMinutes(),
      step: 5
    };
    var l = function(e, t) {
      var i = e.$set.split("."),
        n = [e.$scheme];
      for (index in i) n.push(n[index][i[index]]);
      n[n.length - 1] = JSON.stringify(t);
      for (index in i) n[i.length - 1 - index][i[i.length - 1 - index]] = n[i.length - index];
      return e.$scheme
    };
    e.add = function(i) {
      var a = [];
      if ("true" === e.groupEntry || e.groupEntry === !0) {
        var o = JSON.parse(JSON.stringify(e.fhir));
        o = l(o, i), o.data.effectiveDateTime = e.datetime, a.push(o)
      } else
        for (field in i)
          if (i.hasOwnProperty(field) && i[field] && "" !== i[field]) {
            var o = JSON.parse(JSON.stringify(e.fhir[field]));
            o = l(o, i[field]), o.data.effectiveDateTime = e.datetime, a.push(o)
          }
      n.add(a).then(function(i) {
        i.success ? (e.info = {
          text: i.info,
          type: "balanced"
        }, t(function() {
          e.closeModal(), "true" === e.clear && s()
        }, 700)) : e.info = {
          text: i.info,
          type: "energized"
        }
      }, function(t) {
        e.info = {
          text: t,
          type: "assertive"
        }
      })
    }
  }]).controller("I4MIMidataChartController", ["$scope", function(e) {
    var t, i;
    "second" === e.interval ? (t = 19, i = function(e) {
      return e.setMilliseconds(0), e
    }) : "minute" === e.interval ? (t = 16, i = function(e) {
      return e.setMilliseconds(0), e.setSeconds(0), e
    }) : "hour" === e.interval ? (t = 16, i = function(e) {
      return e.setMilliseconds(0), e.setSeconds(0), e.setMinutes(0), e
    }) : "day" === e.interval ? (t = 10, i = function(e) {
      return e.setMilliseconds(0), e.setSeconds(0), e.setMinutes(0), e.setHours(0), e
    }) : "month" === e.interval ? (t = 7, i = function(e) {
      return e.setMilliseconds(0), e.setSeconds(0), e.setMinutes(0), e.setHours(0), e.setDate(1), e
    }) : "year" === e.interval ? (t = 4, i = function(e) {
      return e.setMilliseconds(0), e.setSeconds(0), e.setMinutes(0), e.setHours(0), e.setDate(1), e.setMonth(1), e
    }) : (t = 30, i = function(e) {
      return e
    });
    var n = {
      chart: {
        type: e.type || "lineChart",
        height: window.innerHeight / 3,
        margin: {
          top: 20,
          right: 50,
          bottom: 30,
          left: 50
        },
        useInteractiveGuideline: !0,
        showValues: !0,
        valueFormat: function(e) {
          return e
        },
        xAxis: {
          tickFormat: function(e) {
            return "discreteBarChart" !== n.chart.type && (e = new Date(e).toJSON(), e = e.substring(0, t).replace(/T/, " ")), e
          }
        },
        yAxis: {
          tickFormat: function(e) {
            return Math.round(e, 2)
          }
        }
      }
    };
    e.options = n, e.$watch("records", function() {
      var t = {};
      for (index in e.records) {
        var a = e.records[index];
        if (a.data && a.data.valueQuantity && !isNaN(a.data.valueQuantity.value) && a.data.effectiveDateTime && "entered-in-error" !== a.data.status) {
          var o = a.name || "records";
          t[o] || (t[o] = {
            name: a.name || "",
            unit: a.data.valueQuantity.unit,
            data: {}
          });
          var r, s = i(new Date(a.data.effectiveDateTime));
          r = "discreteBarChart" === n.chart.type ? "all" : s.toJSON();
          var l = t[o].data[r] || {
            value: 0,
            count: 0,
            first: a.data.valueQuantity.value,
            xtime: s.getTime()
          };
          l.value += 1 * a.data.valueQuantity.value, l.count += 1, t[o].data[r] = l
        }
      }
      var u = [];
      for (o in t)
        if (t.hasOwnProperty(o)) {
          var c = t[o],
            d = [];
          for (r in c.data)
            if (c.data.hasOwnProperty(r)) {
              l = c.data[r];
              var m;
              m = "sum" === e.operation ? l.value : "avg" === e.operation ? l.value / l.count : l.first, d.push({
                x: l.xtime,
                y: m
              })
            }
          var p;
          "discreteBarChart" === n.chart.type ? (d[0].x = c.name, p = {
            key: c.name + " [" + c.unit + "]",
            values: d
          }) : p = {
            key: c.name + " [" + c.unit + "]",
            values: d
          }, p.values.sort(function(e, t) {
            return e.x < t.x ? -1 : e.x > t.x ? 1 : 0
          }), u.push(p)
        }
      e.data = u
    })
  }]).directive("i4miChart", [function() {
    return {
      restrict: "E",
      scope: {
        type: "@",
        records: "=",
        options: "=?",
        interval: "@",
        operation: "@"
      },
      controller: "@",
      name: "controllerName",
      link: function(e, t, i) {},
      templateUrl: "i4mi.midata.chart.html"
    }
  }]).directive("i4miList", ["I4MIMidataService", function(e) {
    return {
      restrict: "E",
      scope: {
        records: "=",
        canSwipe: "@canRemove",
        showKey: "@",
        keys: "@",
        templateUrl: "@"
      },
      link: function(t, i, n) {
        t.shouldShow = function(e) {
          return !n.keys || (n.keys + ",").indexOf(e + ",") !== -1
        }, t.remove = function(t) {
          t.data.status = "entered-in-error", e.update(t)
        }
      },
      templateUrl: "i4mi.midata.list.html"
    }
  }]).directive("i4miMidataLogin", [function() {
    return {
      restrict: "E",
      scope: {
        user: "="
      },
      controller: "@",
      name: "controllerName",
      templateUrl: "i4mi.midata.login.html",
      link: function(e, t, i) {
        e.viewClass = "widget", e.openModal = function() {}, e.closeModal = function() {}
      }
    }
  }]).directive("i4miMidataLogout", [function() {
    return {
      restrict: "E",
      scope: {},
      controller: "@",
      name: "controllerName",
      templateUrl: "i4mi.midata.logout.html",
      link: function(e, t, i) {
        e.viewClass = "widget", e.openModal = function() {}, e.closeModal = function() {}
      }
    }
  }]).directive("i4miMidataEntry", [function() {
    return {
      restrict: "E",
      scope: {
        model: "=",
        schema: "=fields",
        fhir: "=",
        groupEntry: "@",
        clear: "@",
        "native": "@"
      },
      controller: "@",
      name: "controllerName",
      templateUrl: "i4mi.midata.entry.html",
      link: function(e, t, i) {
        e.viewClass = "widget", e.openModal = function() {}, e.closeModal = function() {
          e.info = void 0
        }
      }
    }
  }]).directive("i4miHealthkitBasic", ["I4MIHealthKitService", "$ionicPlatform", function(e, t) {
    return {
      restrict: "E",
      scope: {
        autosave: "@",
        update: "=?",
        title: "@"
      },
      link: function(i, n, a) {
        t.ready(function() {
          i.data = i.data || {}, i.saved = !0, e.readDateOfBirth().then(function(e) {
            i.data.dateofbirth = e, "function" == typeof i.update && 5 === Object.keys(i.data).length && i.update(i.data)
          }, function() {}), e.readGender().then(function(e) {
            i.data.gender = e, "function" == typeof i.update && 5 === Object.keys(i.data).length && i.update(i.data)
          }, function() {}), e.readBloodType().then(function(e) {
            i.data.bloodtype = e, "function" == typeof i.update && 5 === Object.keys(i.data).length && i.update(i.data)
          }, function() {}), e.readWeight({
            unit: "kg"
          }).then(function(e) {
            e.amount = e.value, e.unit = "kg", i.data.weight = e, "function" == typeof i.update && 5 === Object.keys(i.data).length && i.update(i.data)
          }, function() {
            i.data.weight = {
              unit: "kg"
            }
          }), e.readHeight({
            unit: "cm"
          }).then(function(e) {
            e.amount = e.value, e.unit = "cm", i.data.height = e, "function" == typeof i.update && 5 === Object.keys(i.data).length && i.update(i.data)
          }, function() {
            i.data.height = {
              unit: "cm"
            }
          }), i.blur = function(t) {
            if (i.autosave + "" == "true") {
              for (var n in t) {
                var a = t[n];
                a.amount !== a.value && (a.amount = a.value, a.date = new Date, e["save" + n.charAt(0).toUpperCase() + n.substr(1)](a).then(function() {}, function() {}))
              }
              "function" == typeof i.update && i.update(i.data)
            }
          }, i.change = function(e) {
            var t = !1;
            for (var n in e) {
              var a = e[n];
              if (a.amount !== a.value) {
                t = !0;
                break
              }
            }
            i.saved = !t
          }, i.save = function(t) {
            i.saved = !0;
            for (var n in t) {
              var a = t[n];
              a.amount !== a.value && (a.amount = a.value, a.date = new Date, e["save" + n.charAt(0).toUpperCase() + n.substr(1)](a).then(function() {}, function() {}))
            }
            "function" == typeof i.update && i.update(i.data)
          }
        })
      },
      templateUrl: "i4mi.healthkit.basic.html"
    }
  }]).directive("i4miCcdaImport", ["I4MICcdaService", function(e) {
    return {
      restrict: "E",
      scope: {
        url: "=",
        display: "@",
        callback: "=",
        action: "=",
        actionText: "@"
      },
      link: function(t, i, n) {
        t["import"] = function(i) {
          e.importRecord(i).then(function(e) {
            t.record = e, "function" == typeof t.callback && t.callback(e)
          }, function() {})
        }, t["continue"] = function(e) {
          "function" == typeof t.action && t.action(e), t.record = null
        }
      },
      templateUrl: "i4mi.ccda.import.html"
    }
  }]).service("I4MIService", ["$ionicPlatform", "I4MIModalService", "I4MISettingsService", "I4MICcdaService", "I4MIHealthKitService", "I4MIDefaultsService", "I4MIMappingService", "I4MIMidataService", function(e, t, i, n, a, o, r, s) {
    var l = {
      modal: t,
      settings: i,
      ccda: n,
      healthkit: a,
      "default": o,
      mapping: r,
      midata: s
    };
    return l
  }]).service("I4MIModalService", ["$ionicModal", "$rootScope", "$q", "$injector", "$controller", function(e, t, i, n, a) {
    function o(n, o, l, u) {
      var c, d = i.defer(),
        m = t.$new(),
        p = m.$id;
      for (var f in l) l.hasOwnProperty(f) && (m[f] = l[f]);
      return e.fromTemplateUrl(n, {
        scope: m,
        animation: u.animation || "slide-in-up",
        focusFirstInput: u.focusFirstInput,
        backdropClickToClose: u.backdropClickToClose,
        hardwareBackButtonClose: u.hardwareBackButtonClose
      }).then(function(e) {
        m.modal = e, m.openModal = function() {
          m.modal.show()
        }, m.closeModal = function(e) {
          d.resolve(e), m.modal.hide()
        }, m.$on("modal.hidden", function(e) {
          if (e.currentScope) {
            var t = e.currentScope.$id;
            p === t && (d.resolve(null), r(e.currentScope))
          }
        });
        var t = {
            $scope: m,
            parameters: u
          },
          i = s(o);
        c = a(o, t), i.isControllerAs && (c.openModal = m.openModal, c.closeModal = m.closeModal), m.modal.show()
      }, function(e) {
        d.reject(e)
      }), d.promise
    }

    function r(e) {
      e.$destroy(), e.modal && e.modal.remove()
    }

    function s(e) {
      var t = {
          isControllerAs: !1,
          controllerName: "",
          propName: ""
        },
        i = (e || "").trim().split(/\s+/);
      return t.isControllerAs = 3 === i.length && "as" === (i[1] || "").toLowerCase(), t.isControllerAs ? (t.controllerName = i[0], t.propName = i[2]) : t.controllerName = e, t
    }
    return {
      show: o
    }
  }]).service("I4MISettingsService", ["$localStorage", "$crypto", "$ionicPlatform", function(e, t, i) {
    var n;
    return n = window.device && device.uuid ? device.uuid : "1234", e.settings || (e.settings = {}), {
      set: function(i, a) {
        e.settings[i] = t.encrypt(JSON.stringify(a), n)
      },
      get: function(i) {
        return e.settings[i] ? JSON.parse(t.decrypt(e.settings[i], n)) : {}
      }
    }
  }]).service("I4MICcdaService", ["$q", "$http", function(e, t) {
    var i = function(i) {
      var n = e.defer();
      return t({
        method: "GET",
        url: i
      }).then(function(e) {
        var t = BlueButton(e.data);
        n.resolve(t)
      }, function(e) {
        n.reject("Could not connect!")
      }), n.promise
    };
    return {
      importRecord: i
    }
  }]).service("I4MIHealthKitService", ["I4MIModalService", "$q", function(e, t) {
    var i = function(e) {
      return function(i) {
        var n = t.defer();
        return window.plugins && plugins.healthkit ? "undefined" != typeof i ? plugins.healthkit[e](i, n.resolve, n.reject) : plugins.healthkit[e](n.resolve, n.reject) : n.reject("healthkit not available"), n.promise
      }
    };
    return {
      available: function() {
        return "undefined" != typeof plugins.healthkit
      },
      checkAuthStatus: i("checkAuthStatus"),
      requestAuthorization: i("requestAuthorization"),
      readDateOfBirth: i("readDateOfBirth"),
      readGender: i("readGender"),
      readBloodType: i("readBloodType"),
      readWeight: i("readWeight"),
      saveWeight: i("saveWeight"),
      readHeight: i("readHeight"),
      saveHeight: i("saveHeight"),
      saveWorkout: i("saveWorkout"),
      findWorkouts: i("findWorkouts"),
      querySampleType: function(e) {
        return t(function(t, i) {
          plugins.healthkit.querySampleType(e, function(i) {
            for (var n in i) {
              var a = i[n];
              a.sampleType = e.sampleType, a.amount = a.quantity || a.value
            }
            t(i)
          }, i)
        })
      },
      querySampleTypeAggregated: i("querySampleTypeAggregated"),
      sumQuantityType: i("sumQuantityType"),
      monitorSampleType: i("monitorSampleType"),
      saveQuantitySample: i("saveQuantitySample"),
      saveCorrelation: i("saveCorrelation"),
      queryCorrelationType: i("queryCorrelationType")
    }
  }]).service("I4MIDefaultsService", ["I4MISettingsService", "I4MIMapping", "I4MIUnits", "I4MISystems", "I4MIFormats", "I4MISchemes", function(e, t, i, n, a, o) {
    var r = e.get("i4mi.defaults");
    r.I4MIMapping = r.I4MIMapping || t, r.I4MIUnits = r.I4MIUnits || i, r.I4MISystems = r.I4MISystems || n, r.I4MIFormats = r.I4MIFormats || a, r.I4MISchemes = r.I4MISchemes || o;
    var s = function(e, t) {
        e = e.split(".");
        var i = t || r;
        for (var n in e)
          if (i = i[e[n]], "string" == typeof i)
            if ("$ref:" === i.substr(0, 5)) i = s(i.substr(5));
            else {
              var a = i.match(/\{\$ref:[^\{\}\|]+\}/gi);
              for (var n in a) {
                var o = s(a[n].substring(6, a[n].length - 1));
                i = i.replace(a[n], o)
              }
            }
        return c(i)
      },
      l = function(e, t) {
        var i = s(e, t);
        return "string" != typeof i && (i = JSON.stringify(i)), i
      },
      u = function(e, t, i) {
        e = e.split("."), i = i || r;
        var n = [i];
        for (index in e) n.push(n[index][e[index]] || {});
        n[n.length - 1] = t;
        for (index in e) n[e.length - 1 - index][e[e.length - 1 - index]] = n[e.length - index]
      },
      c = function(e) {
        for (var t in e) {
          var i = e[t];
          if ("string" == typeof i)
            if ("$ref:" === i.substr(0, 5)) i = s(i.substr(5));
            else {
              var n = i.match(/\{\$ref:[^\{\}\|]+\}/gi);
              for (var a in n) {
                var o = s(n[a].substring(6, n[a].length - 1));
                i = i.replace(n[a], o)
              }
            }
            "object" == typeof i && (i = c(i)), e[t] = i
        }
        return e
      };
    return {
      get: s,
      getString: l,
      set: u,
      resolve: c
    }
  }]).service("I4MIMappingService", ["I4MIDefaultsService", function(e) {
    var t = e.get("I4MIMapping"),
      i = e.get("I4MISchemes"),
      n = function(n, a, o, r) {
        Array.isArray(o) || (o = [o]);
        var s = [];
        for (var l in o) {
          var u = o[l],
            c = !1,
            d = r;
          if ("undefined" == typeof d)
            for (var m in i) {
              var p = i[m];
              for (var f in t) {
                var v = t[f];
                if (e.getString(v[n].typeKey, u) === e.getString(v[n].typeKey, p[n])) {
                  d = m, c = !0;
                  break
                }
              }
              if (c) break
            }
          var h = JSON.parse(JSON.stringify(i[d][a]));
          for (var g in t[d][n])
            if ("typeKey" !== g) {
              var y = t[d][n][g][0].split("|"),
                b = e.get(y[0], u),
                M = t[d][a][g];
              for (var l in M) {
                var I = M[l].split("|"),
                  k = I[0];
                if ("date" === g) {
                  var w = I[1],
                    S = new Date(b);
                  "iso" === w && (S = S.toISOString()), b = S
                }
                e.set(k, b, h)
              }
            }
          s.push(h)
        }
        return s
      };
    return {
      map: n
    }
  }]).service("I4MIMidataService", ["I4MIModalService", "I4MISettingsService", "$q", "$http", "$crypto", "APPNAME", "APPSECRET", function(e, t, i, n, a, o, r) {
    var s = o,
      l = r,
      u = function(e) {
        var i = {
          encrypted: a.encrypt(JSON.stringify(e), l)
        };
        t.set("midata", i)
      },
      c = function() {
        var e = t.get("midata");
        if (e.encrypted) try {
          return JSON.parse(a.decrypt(e.encrypted, l))
        } catch (i) {
          return {}
        }
        return {}
      },
      d = c(),
      m = function() {
        d = {}, u({})
      },
      p = function(e) {
        var t = {
          appname: s,
          secret: l
        };
        return e.refreshToken ? t.refreshToken = e.refreshToken : (t.username = e.username, t.password = e.password), e.server = "https://" + e.server.replace(/^https*:\/\//, ""), i(function(i, a) {
          n({
            method: "POST",
            url: e.server + "/v1/auth",
            data: t
          }).then(function(t) {
            if ("undefined" == typeof t.status || 200 != t.status) m(), i({
              authorized: !1,
              info: "Login failed."
            });
            else {
              var n = t.data;
              n.info = "Login successfull.", n.authorized = !0, d = {}, d.credentials = n, d.server = e.server, d.username = e.username, u(d), i(n)
            }
          }, function(e) {
            m(), a("undefined" == typeof e.data ? "Could not connect!" : e.data)
          })
        })
      };
    d.credentials && "" !== d.credentials.refreshToken && p({
      refreshToken: d.credentials.refreshToken,
      username: d.username,
      server: d.server
    }).then(function(e) {}, function(e) {});
    var f = function(e, t, a) {
      return i(function(i, o) {
        if (0 === t.length) return i({
          info: "At least one must not be empty!",
          success: !1
        });
        var r = t[a];
        return "object" == typeof r.data && (r.data = JSON.stringify(r.data)), d.credentials && d.credentials.authToken ? (r.authToken = d.credentials.authToken, void n({
          method: "POST",
          url: d.server + "/v1/records/" + e,
          data: r
        }).then(function(n) {
          "undefined" == typeof n.status || 200 != n.status ? o("Could not push data to server!") : a < t.length - 1 ? f(e, t, a + 1).then(function(e) {
            i(e)
          }, function(e) {
            o(e)
          }) : i({
            info: "Entrey saved.",
            success: !0
          })
        }, function(e) {
          o("Could not push data to server!")
        })) : o("You must login first in order to add a new entry!")
      })
    };
    return {
      auth: p,
      login: function(t, n, a) {
        return d.credentials && "" !== d.credentials.authToken ? i(function(e, t) {
          e(d.credentials)
        }) : (a = a || d.server, t && n && a ? p({
          username: t,
          password: n,
          server: a
        }) : e.show("i4mi.midata.login.html", "I4MIMidataLoginController", {
          viewClass: "modal",
          user: {
            username: t,
            password: n,
            server: a
          }
        }, {
          animation: "",
          focusFirstInput: !0,
          backdropClickToClose: !1,
          hardwareBackButtonClose: !1
        }))
      },
      logout: m,
      loggedIn: function() {
        return d.credentials && "" !== d.credentials.authToken
      },
      currentUser: function() {
        return d.username
      },
      all: function() {
        return []
      },
      search: function(e, t) {
        return e = e || ["data", "name"], e.push("_id", "version"), t = t || {}, i(function(i, a) {
          n({
            method: "POST",
            url: d.server + "/v1/records/search",
            data: {
              authToken: d.credentials.authToken,
              fields: e,
              properties: t
            }
          }).then(function(e) {
            if ("undefined" == typeof e.status || 200 != e.status) a("Connection error!");
            else {
              for (index in e.data) {
                var t = e.data[index];
                try {
                  if ("string" == typeof t.data.valueQuantity.value) {
                    var n = JSON.parse(t.data.valueQuantity.value);
                    t.data.valueQuantity.value = n
                  }
                } catch (o) {}
              }
              i(e)
            }
          }, function(e) {
            a("Could not connect!")
          })
        })
      },
      add: function(e) {
        return Array.isArray(e) || (e = [e]), f("create", e, 0)
      },
      update: function(e) {
        Array.isArray(e) || (e = [e]);
        for (index in e) {
          var t = {
            _id: e[index]._id,
            version: e[index].version,
            data: e[index].data
          };
          e[index] = t
        }
        return f("update", e, 0)
      },
      remove: function(e) {},
      newEntry: function(t, i, n, a) {
        return a = a || {}, e.show("i4mi.midata.entry.html", "I4MIMidataEntryController", {
          viewClass: "modal",
          model: t,
          schema: i,
          fhir: n,
          groupEntry: a.groupEntry,
          clear: a.clear,
          "native": a["native"]
        }, {
          animation: "slide-in-up",
          focusFirstInput: !0,
          backdropClickToClose: !0,
          hardwareBackButtonClose: !0
        })
      }
    }
  }]);
